{"name":"Cheet.NET","tagline":"easy easter eggs (konami code, etc) for your .NET projects.","body":"This is a .NET port of the excellent [cheet.js](https://github.com/namuol/cheet.js) by [Louis Acresti (namuol)](https://github.com/namuol). I would recommend checking out that project if you need easter egg functionality in browser!\r\n\r\n```csharp\r\n// Initialization\r\nvar cheet = new Cheet();\r\nmyUIElement.PreviewKeyDown += cheet.OnKeyDown;\r\n```\r\n\r\n```csharp\r\ncheet.Map(\"↑ ↑ ↓ ↓ ← → ← → b a\", () => { Debug.WriteLine(\"Voilà!\"); } );\r\n```\r\n\r\n```csharp\r\ncheet.Map(\"i d d q d\", () => {\r\n  Debug.WriteLine(\"god mode enabled\");\r\n});\r\n```\r\n\r\n```csharp\r\ncheet.Map(\"o n e a t a t i m e\", new CheetCallbacks {\r\n  Next = (str, key, num, seq) => {\r\n    Debug.WriteLine(\"key pressed: \" + key);\r\n    Debug.WriteLine(\"progress: \" + (double)num / seq.Length);\r\n    Debug.WriteLine(\"seq: \" + String.Join(\" \", seq));\r\n  },\r\n\r\n  Fail = (str, seq) => {\r\n    Debug.WriteLine(\"sequence failed\");\r\n  },\r\n\r\n  Done = (str, seq) => {\r\n    Debug.WriteLine(\"+30 lives ;)\");\r\n  }\r\n});\r\n```\r\n\r\n```csharp\r\ncheet.Map(\"o n c e\", () => {\r\n  Debug.WriteLine(\"This will only fire once.\");\r\n  cheet.Disable(\"o n c e\");\r\n});\r\n```\r\n\r\n```csharp\r\ndynamic sequences = new {\r\n  Cross = \"up down left right\",\r\n  Circle = \"left up right down\"\r\n};\r\n\r\ncheet.Map(sequences.Cross);\r\ncheet.Map(sequences.Circle);\r\n\r\ncheet.Done((str, seq) => {\r\n  if (str == sequences.Cross) {\r\n    Debug.WriteLine(\"cross!\");\r\n  } else if (str == sequences.Circle) {\r\n    Debug.WriteLine(\"circle!\");\r\n  }\r\n});\r\n```\r\n\r\n### Demo\r\n\r\nThe `Cheet.Wpf.Demo` project in this repository demos all of the above sequences.\r\n\r\n### Install\r\n\r\n#### NuGet\r\nWPF version:\r\n\r\n    Install-Package Cheet.Wpf\r\n\r\n### API\r\n\r\n<a name='api_cheet'></a>\r\n#### [`cheet.Map(sequence, done | callbacks { done, next, fail })`](#api_cheet)\r\n\r\nMap a sequence of keypresses to a callback. This can be called multiple times.\r\n\r\n> <a name='api_cheet_sequence'></a>\r\n> [`sequence`](#api_cheet_sequence) (String)\r\n> > A string representation of a sequence of [key names](#available-key-names).\r\n> > \r\n> > Each keyname must be separated by a single space.\r\n> \r\n> <a name='api_cheet_done'></a>\r\n> [`done(str, seq)`](#api_cheet_done) (callback)\r\n> > A callback to execute each time the sequence is correctly pressed.\r\n> > \r\n> > Arguments:\r\n> > * `str` - The string representation of the sequence that completed.\r\n> > * `seq` - An array of keys representing the sequence that completed.\r\n> \r\n> <a name='api_cheet_fail'></a>\r\n> [`fail(str, seq)`](#api_cheet_fail) (callback)\r\n> > A callback to execute each time a sequence's progress is broken.\r\n> > \r\n> > Arguments:\r\n> > * `str` - The string representation of the sequence that failed.\r\n> > * `seq` - An array of keys representing the sequence that was pressed.\r\n>\r\n> <a name='api_cheet_next'></a>\r\n> [`next(str, key, num, seq)`](#api_cheet_next) (callback)\r\n> > A callback to execute each time a correct key in the sequence is pressed *in order*.\r\n> > \r\n> > Arguments:\r\n> > * `str` - The string representation of the sequence that is in progress.\r\n> > * `key` - The [name of the key](#available-key-names) that was just pressed.\r\n> > * `num` - A number representing the current progress of the sequence. (starts at 0)\r\n> > * `seq` - An array of keys representing the sequence that is in progress.\r\n\r\n<a name='api_done'></a>\r\n#### [`cheet.Done(callback)`](#api_done)\r\n\r\nSet a global callback that executes whenever *any* mapped sequence is completed successfully.\r\n\r\n> <a name='api_done_callback'></a>\r\n> [`callback(str, seq)`](#api_done_callback) (callback)\r\n> > A callback to execute each time *any* sequence is correctly pressed.\r\n> > \r\n> > Arguments:\r\n> > * `str` - The string representation of the sequence that completed.\r\n> > * `seq` - An array of keys representing the sequence that completed.\r\n\r\n<a name='api_next'></a>\r\n#### [`cheet.Next(callback)`](#api_next)\r\n\r\nSet a global callback that executes whenever *any* mapped sequence progresses.\r\n\r\n> <a name='api_next_callback'></a>\r\n> [`callback(str, key, num, seq)`](#api_next_callback) (callback)\r\n> > A callback to execute each time a correct key in any sequence is pressed *in order*.\r\n> > \r\n> > Arguments:\r\n> > * `str` - The string representation of the sequence that is in progress.\r\n> > * `key` - The [name of the key](#available-key-names) that was just pressed.\r\n> > * `num` - A number representing the current progress of the sequence. (starts at 0)\r\n> > * `seq` - An array of keys representing the sequence that is in progress.\r\n\r\n<a name='api_fail'></a>\r\n#### [`cheet.Fail(callback)`](#api_fail)\r\n\r\nSet a global callback that executes whenever *any* in-progress sequence is broken.\r\n\r\n> <a name='api_fail_callback'></a>\r\n> [`callback(str, seq)`](#api_fail_callback) (callback)\r\n> > A callback to execute each time *any* sequence's progress is broken.\r\n> > \r\n> > Arguments:\r\n> > * `str` - The string representation of the sequence that failed.\r\n> > * `seq` - An array of keys representing the sequence that was pressed.\r\n\r\n<a name='api_disable'></a>\r\n#### [`cheet.Disable(sequence)`](#api_disable)\r\n\r\nDisable a previously-mapped sequence.\r\n\r\n> <a name='api_disable_sequence'></a>\r\n> [`sequence`](#api_disable_sequence) (String)\r\n> > The same string you used to map the callback when using [`cheet(seq, ...)`](#api_cheet).\r\n\r\n<a name='api_reset'></a>\r\n#### [`cheet.Reset(sequence)`](#api_reset)\r\n\r\nResets a sequence that may or may not be in progress.\r\n\r\nThis will *not* cause `fail` callbacks to fire, but will effectively\r\ncancel the sequence.\r\n\r\n> <a name='api_reset_sequence'></a>\r\n> [`sequence`](#api_reset_sequence) (String)\r\n> > The same string you used to map the callback when using [`cheet(seq, ...)`](#api_cheet).\r\n\r\n### Available Key Names\r\n\r\n**NOTE**: Key names are case-sensitive\r\n\r\n#### Directionals\r\n* `left` | `L` | `←`\r\n* `up` | `U` | `↑`\r\n* `right` | `R` | `→`\r\n* `down` | `D` | `↓`\r\n\r\n#### Alphanumeric\r\n* `0`-`9` (main number keys)\r\n* `a`-`z`\r\n\r\n#### Misc\r\n* `backspace`\r\n* `tab`\r\n* `enter` | `return`\r\n* `shift` | `⇧`\r\n* `control` | `ctrl` | `⌃`\r\n* `alt` | `option` | `⌥`\r\n* `command` | `⌘`\r\n* `pause`\r\n* `capslock`\r\n* `esc`\r\n* `space`\r\n* `pageup`\r\n* `pagedown`\r\n* `end`\r\n* `home`\r\n* `insert`\r\n* `delete`\r\n* `equal` | `=`\r\n* `comma` | `,`\r\n* `minus` | `-`\r\n* `period` | `.`\r\n\r\n#### Keypad\r\n* `kp_0`-`kp_9`\r\n* `kp_multiply`\r\n* `kp_plus`\r\n* `kp_minus`\r\n* `kp_decimal`\r\n* `kp_divide`\r\n\r\n#### Function keys\r\n* `f1`-`f12`\r\n\r\n### License\r\n\r\nMIT\r\n\r\n### Acknowledgements\r\n\r\nThis whole project was inspired and based on [cheet.js](https://github.com/namuol/cheet.js) by [Louis Acresti (namuol)](https://github.com/namuol). The API and all of this documentation is lifted from that project!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}